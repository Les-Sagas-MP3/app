name: Release

on:
  push:
    branches:
      - master

jobs:

  verify-version:
    runs-on: ubuntu-latest
    name: Verify version
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: "echo ::set-output name=VERSION::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"
    - name: Test snapshot
      run: if [[ "${{ steps.get_version.outputs.VERSION }}" == *"-SNAPSHOT" ]]; then exit 1; else exit 0; fi
    - name: Get release
      id: get_release
      run: echo ::set-output name=RELEASE_HTTP_CODE::$(curl -s -o out.html -w '%{http_code}'  https://github.com/les-sagas-mp3/app/releases/tag/${{ steps.get_version.outputs.VERSION }};)
    - name: Test release existence
      run: if [[ "${{ steps.get_release.outputs.RELEASE_HTTP_CODE }}" -eq "200" ]]; then exit 1; else exit 0; fi

  build:
    needs: verify-version
    name: Build Ionic
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present

  build-android:
    needs: build
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install node modules
        run: npm install
      - name: Use coturiv/setup-ionic
        uses: coturiv/setup-ionic@v1
        with:
          ionic-version: 6.11.8
      - name: Copy assets to Android
        run: ionic build --configuration=heroku-fr
      - name: Sync Ionic with Android
        run: ionic cap sync
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set private key
        run: echo "${{ secrets.ANDROID_SIGNING_KEY_PRIV }}" > android-signing-key.key
      - name: Set public key
        run: echo "${{ secrets.ANDROID_SIGNING_KEY_PUB }}" > android-signing-key.pem
      - name: Create PKCS12 Keystore
        run: openssl pkcs12 -export -in android-signing-key.pem -inkey android-signing-key.key -name "lessagasmp3" -out keystore.p12 -password pass:${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }}
      - name: Convert to JKS Keystore
        run: keytool -importkeystore -deststorepass ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }} -destkeystore keystore.jks -deststoretype JKS -srcstorepass ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }} -srckeystore keystore.p12 -srcstoretype PKCS12
      - name: Add keystore path to Gradle
        run: echo "RELEASE_STORE_FILE=${{ github.workspace }}/android/keystore.jks" > key.properties
      - name: Add other signing properties to Gradle
        run: echo "${{ secrets.ANDROID_SIGNING_PROPERTIES }}" > key.properties
      - name: Build Debug APK
        run: cd android && bash ./gradlew :app:assembleRelease
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: App
          path: ${{ github.workspace }}/android/app/build/outputs/apk/release/app-release-unsigned.apk

  release:
    needs: [verify-version, build, build-android]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Config Git
        run: git config user.email "${{ secrets.GIT_CONFIG_EMAIL }}" && git config user.name "${{ secrets.GIT_CONFIG_NAME }}"
      - run: git tag ${{ needs.verify-version.outputs.version }}
      - run: git push origin ${{ needs.verify-version.outputs.version }}
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.verify-version.outputs.version }}
          release_name: ${{ needs.verify-version.outputs.version }}
          body: |
            Release ${{ needs.verify-version.outputs.version }}
          draft: false
          prerelease: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install node modules
        run: npm install
      - name: Use coturiv/setup-ionic
        uses: coturiv/setup-ionic@v1
        with:
          ionic-version: 6.11.8
      - name: Copy assets to Android
        run: ionic build --configuration=heroku-fr
      - name: Sync Ionic with Android
        run: ionic cap sync
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set private key
        run: echo "${{ secrets.ANDROID_SIGNING_KEY_PRIV }}" > android-signing-key.key
      - name: Set public key
        run: echo "${{ secrets.ANDROID_SIGNING_KEY_PUB }}" > android-signing-key.pem
      - name: Create PKCS12 Keystore
        run: openssl pkcs12 -export -in android-signing-key.pem -inkey android-signing-key.key -name "lessagasmp3" -out keystore.p12 -password pass:${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }}
      - name: Convert to JKS Keystore
        run: keytool -importkeystore -deststorepass ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }} -destkeystore keystore.jks -deststoretype JKS -srcstorepass ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASS }} -srckeystore keystore.p12 -srcstoretype PKCS12
      - name: Add keystore path to Gradle
        run: echo "RELEASE_STORE_FILE=${{ github.workspace }}/android/keystore.jks" > key.properties
      - name: Add other signing properties to Gradle
        run: echo "${{ secrets.ANDROID_SIGNING_PROPERTIES }}" > key.properties
      - name: Build Debug APK
        run: cd android && bash ./gradlew :app:assembleRelease
      - name: Upload APK
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/android/app/build/outputs/apk/release/app-release-unsigned.apk
          asset_name: les-sagas-mp3.apk
          asset_content_type: application/vnd.android.package-archive

  publish-docker:
    needs: [verify-version, release]
    name: Build & Publish Docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: '${{ needs.verify-version.outputs.version }}'
    - name: Build the Docker image
      run: docker build . --file Dockerfile --build-arg configuration=heroku-fr --tag docker.pkg.github.com/les-sagas-mp3/app/app:heroku-${{ needs.verify-version.outputs.version }}
    - name: Login to Registry
      run: docker login docker.pkg.github.com -u thomah -p ${{secrets.GITHUB_TOKEN}}
    - name: Publish to Registry
      run: docker push docker.pkg.github.com/les-sagas-mp3/app/app:heroku-${{ needs.verify-version.outputs.version }}
